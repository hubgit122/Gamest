
#ifndef __GUI_H__
#define __GUI_H__

#include "utilities.h"
#include "ChessGameConfig.h"

//GUI线程令主线程清空数据, 重新开始.
#define WM_RESTART          (WM_USER+1)

//GUI线程给工作线程消息, 可以给我下一步了, 我好根据你的结果画图.
//而工作线程发现当前玩家是人, 通知GUI线程读取走法, 然后传给我数据, 我好给你交差.
//这样设计可扩展, GUI不必知道下一轮是人还是电脑.
#define WM_GET_MOVE         (WM_USER+2)
#define WM_MOVE_COMPLETE (WM_USER+3)
#define  WM_STATUS_TEXT (WM_USER+4)
#define WM_REGERT (WM_USER+5)

#define CIG_END         0
#define  CIG_UNDO       1
#define CIG_POINT       2

class CConfigurableIntelligenceGameView;
namespace CIG
{
    class Chessboard;
    class GUI
    {
        public:

            /*************************************************************************
                设置通信接口, 跨平台时需要重写代码.
            **************************************************************************/
            static CEvent drawComplete;
            static CEvent moveComplete;
            static CConfigurableIntelligenceGameView *cigView;
            static void drawBoard(Chessboard *cb = NULL, void *move = NULL);
            static void inform(const string &messsage, bool exit = false);
            static void exit();
            static UINT runThread(LPVOID pParam);
            static void postMessage(UINT msg, WPARAM wp, LPARAM  lp);

            /****************************
            askForMove 调用使用GUI输入的走法生成器, 在走法生成器内调用 getInput 函数得到输入
            在getInput函数中阻塞, 等待鼠标或者键盘的操作.
             *****************************/
            static void askForMove(Chessboard *cb, void *op);
            static void GUI::getInput(PointOrVector &dist, UINT &msg);

            /*************************************************************************
                设置棋盘绘制参数
                先确定棋子大小, 在窗口初始化时绘制棋盘并根据棋盘情况确定客户区大小.
                规定几何坐标轴:
                0----------------->x
                |
                |
                |
                ↓
                y
            **************************************************************************/

            static void refreshBoardDisplayData();
            static PointOrVector_Float getGeometryCoordination(int x, int y);
            static PointOrVector_Float getGeometryCoordination(PointOrVector p);
            static PointOrVector getLogicalCoordination(PointOrVector_Float p);
            static PointOrVector getLogicalCoordination(float x, float y);
            static PointOrVector_Float boundsOfBoard;
            static PointOrVector_Float coordinateOf00;
            static int latticePenWidth;
            static PointOrVector guiPoint;
            static CEvent inputGot;
            static UINT msg;
            //判断任意棋盘的边界比较难, 不做了.
            //static int borderPenColor[3];
    };
    std::wstring s2ws(const std::string &s);
}

#endif /*__GUI_H_*/

